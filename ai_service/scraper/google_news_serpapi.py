#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Module ƒë·ªÉ thu th·∫≠p b√†i vi·∫øt t·ª´ Google News
Ch·ªãu tr√°ch nhi·ªám t√¨m ki·∫øm c√°c b√†i vi·∫øt theo danh m·ª•c.
"""

import os
import json
import time
import logging
import sys
import re
import random
from datetime import datetime
import requests
from bs4 import BeautifulSoup

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(f"scraper_{datetime.now().strftime('%Y%m%d')}.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger()

# C√°c ngu·ªìn tin t·ª©c tin c·∫≠y ·ªü Vi·ªát Nam
NEWS_SOURCES = [
    "vnexpress.net",
    "tuoitre.vn",
    "dantri.com.vn",
    "thanhnien.vn",
    "vietnamnet.vn",
    "nhandan.vn",
    "tienphong.vn"
]

# üîπ S·ªë b√†i vi·∫øt t·ªëi ƒëa cho m·ªói danh m·ª•c
MAX_ARTICLES_PER_CATEGORY = 1

# üîπ Laravel Backend API URLs
BACKEND_API_URL = "http://localhost:8000/api/articles/import"
CATEGORIES_API_URL = "http://localhost:8000/api/categories"

def get_categories():
    """
    L·∫•y danh s√°ch danh m·ª•c t·ª´ backend Laravel
    
    Returns:
        list: Danh s√°ch t√™n danh m·ª•c
    """
    try:
        response = requests.get(CATEGORIES_API_URL)
        
        if response.status_code == 200:
            categories = response.json()
            category_names = [category["name"] for category in categories]
            print(f"[OK] ƒê√£ t·∫£i {len(category_names)} danh m·ª•c t·ª´ backend")
            print(f"[INFO] Danh s√°ch danh m·ª•c:\n  - {', '.join(category_names)}")
            return category_names
        else:
            print(f"[ERROR] L·ªói khi l·∫•y danh m·ª•c t·ª´ backend: {response.status_code} - {response.text}")
            # S·ª≠ d·ª•ng danh m·ª•c m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng th·ªÉ l·∫•y t·ª´ backend
            default_categories = ["C√¥ng ngh·ªá", "Kinh doanh", "Gi·∫£i tr√≠", "Th·ªÉ thao", "ƒê·ªùi s·ªëng"]
            print(f"[INFO] S·ª≠ d·ª•ng danh m·ª•c m·∫∑c ƒë·ªãnh: {', '.join(default_categories)}")
            return default_categories
    
    except Exception as e:
        print(f"[ERROR] L·ªói k·∫øt n·ªëi ƒë·∫øn backend: {str(e)}")
        # S·ª≠ d·ª•ng danh m·ª•c m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng th·ªÉ k·∫øt n·ªëi
        default_categories = ["C√¥ng ngh·ªá", "Kinh doanh", "Gi·∫£i tr√≠", "Th·ªÉ thao", "ƒê·ªùi s·ªëng"]
        print(f"[INFO] S·ª≠ d·ª•ng danh m·ª•c m·∫∑c ƒë·ªãnh: {', '.join(default_categories)}")
        return default_categories

def filter_articles(articles):
    """
    L·ªçc c√°c b√†i vi·∫øt theo ti√™u ch√≠, lo·∫°i b·ªè c√°c b√†i kh√¥ng ph√π h·ª£p
    
    Args:
        articles (list): Danh s√°ch b√†i vi·∫øt
        
    Returns:
        list: Danh s√°ch b√†i vi·∫øt ƒë√£ l·ªçc
    """
    filtered_articles = []
    
    for article in articles:
        url = article.get("source_url", "")
        
        # Lo·∫°i b·ªè URL video t·ª´ VTV.vn
        if "vtv.vn/video/" in url:
            logger.info(f"[INFO] B·ªè qua b√†i vi·∫øt video: {article.get('title', 'Kh√¥ng ti√™u ƒë·ªÅ')} - {url}")
            continue
            
        # Th√™m c√°c ti√™u ch√≠ l·ªçc kh√°c n·∫øu c·∫ßn
        
        # N·∫øu qua ƒë∆∞·ª£c c√°c ti√™u ch√≠ l·ªçc, th√™m v√†o danh s√°ch k·∫øt qu·∫£
        filtered_articles.append(article)
    
    return filtered_articles

def get_random_article_for_category(category):
    """
    L·∫•y m·ªôt b√†i vi·∫øt ng·∫´u nhi√™n t·ª´ ngu·ªìn tin c·∫≠y cho danh m·ª•c
    
    Args:
        category (str): T√™n danh m·ª•c
        
    Returns:
        dict: Th√¥ng tin b√†i vi·∫øt
    """
    # Ch·ªçn ngu·ªìn tin ng·∫´u nhi√™n
    source = random.choice(NEWS_SOURCES)
    
    # M√¥ ph·ªèng t√¨m ki·∫øm b√†i vi·∫øt
    if source == "vnexpress.net":
        if category == "C√¥ng ngh·ªá":
            return {
                "title": "B·∫£n tin c√¥ng ngh·ªá m·ªõi nh·∫•t",
                "summary": "T·ªïng h·ª£p tin t·ª©c c√¥ng ngh·ªá ƒë√°ng ch√∫ √Ω",
                "content": None,
                "source_name": {
                    "name": "VnExpress",
                    "icon": "https://s.vnecdn.net/vnexpress/i/v1/logos/vne_logo_rss.png"
                },
                "source_url": f"https://vnexpress.net/khoa-hoc/cong-nghe",
                "source_icon": "https://s.vnecdn.net/vnexpress/i/v1/logos/vne_logo_rss.png",
                "published_at": datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ"),
                "category": category,
                "meta_data": {
                    "original_source": "direct",
                    "scraped_at": datetime.now().isoformat(),
                    "position": 1
                }
            }
        elif category == "Kinh doanh":
            return {
                "title": "Di·ªÖn bi·∫øn th·ªã tr∆∞·ªùng ch·ª©ng kho√°n m·ªõi nh·∫•t",
                "summary": "C·∫≠p nh·∫≠t th√¥ng tin th·ªã tr∆∞·ªùng t√†i ch√≠nh",
                "content": None,
                "source_name": {
                    "name": "VnExpress",
                    "icon": "https://s.vnecdn.net/vnexpress/i/v1/logos/vne_logo_rss.png"
                },
                "source_url": f"https://vnexpress.net/kinh-doanh",
                "source_icon": "https://s.vnecdn.net/vnexpress/i/v1/logos/vne_logo_rss.png",
                "published_at": datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ"),
                "category": category,
                "meta_data": {
                    "original_source": "direct",
                    "scraped_at": datetime.now().isoformat(),
                    "position": 1
                }
            }
        elif category == "Gi·∫£i tr√≠":
            return {
                "title": "S·ª± ki·ªán gi·∫£i tr√≠ n·ªïi b·∫≠t trong ng√†y",
                "summary": "Th√¥ng tin m·ªõi nh·∫•t v·ªÅ c√°c ng√¥i sao v√† s·ª± ki·ªán gi·∫£i tr√≠",
                "content": None,
                "source_name": {
                    "name": "VnExpress",
                    "icon": "https://s.vnecdn.net/vnexpress/i/v1/logos/vne_logo_rss.png"
                },
                "source_url": f"https://vnexpress.net/giai-tri",
                "source_icon": "https://s.vnecdn.net/vnexpress/i/v1/logos/vne_logo_rss.png",
                "published_at": datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ"),
                "category": category,
                "meta_data": {
                    "original_source": "direct",
                    "scraped_at": datetime.now().isoformat(),
                    "position": 1
                }
            }
        elif category == "Th·ªÉ thao":
            return {
                "title": "K·∫øt qu·∫£ c√°c tr·∫≠n ƒë·∫•u b√≥ng ƒë√° m·ªõi nh·∫•t",
                "summary": "C·∫≠p nh·∫≠t tin t·ª©c th·ªÉ thao trong v√† ngo√†i n∆∞·ªõc",
                "content": None,
                "source_name": {
                    "name": "VnExpress",
                    "icon": "https://s.vnecdn.net/vnexpress/i/v1/logos/vne_logo_rss.png"
                },
                "source_url": f"https://vnexpress.net/the-thao",
                "source_icon": "https://s.vnecdn.net/vnexpress/i/v1/logos/vne_logo_rss.png",
                "published_at": datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ"),
                "category": category,
                "meta_data": {
                    "original_source": "direct",
                    "scraped_at": datetime.now().isoformat(),
                    "position": 1
                }
            }
        else:  # ƒê·ªùi s·ªëng
            return {
                "title": "Nh·ªØng c√¢u chuy·ªán ƒë·ªùi th∆∞·ªùng ƒë√°ng ch√∫ √Ω",
                "summary": "G√≥c nh√¨n v·ªÅ cu·ªôc s·ªëng v√† nh·ªØng c√¢u chuy·ªán ƒë·ªùi th∆∞·ªùng",
                "content": None,
                "source_name": {
                    "name": "VnExpress",
                    "icon": "https://s.vnecdn.net/vnexpress/i/v1/logos/vne_logo_rss.png"
                },
                "source_url": f"https://vnexpress.net/doi-song",
                "source_icon": "https://s.vnecdn.net/vnexpress/i/v1/logos/vne_logo_rss.png",
                "published_at": datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ"),
                "category": category,
                "meta_data": {
                    "original_source": "direct",
                    "scraped_at": datetime.now().isoformat(),
                    "position": 1
                }
            }
    elif source == "nhandan.vn":
        return {
            "title": f"Tin t·ª©c m·ªõi nh·∫•t v·ªÅ {category.lower()}",
            "summary": f"C·∫≠p nh·∫≠t th√¥ng tin {category.lower()} h√¥m nay",
            "content": None,
            "source_name": {
                "name": "Nh√¢n D√¢n",
                "icon": "https://img.nhandan.com.vn/Files/Images/2020/10/27/logo_d-1603758303260.png"
            },
            "source_url": f"https://nhandan.vn/{category.lower().replace(' ', '-')}",
            "source_icon": "https://img.nhandan.com.vn/Files/Images/2020/10/27/logo_d-1603758303260.png",
            "published_at": datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ"),
            "category": category,
            "meta_data": {
                "original_source": "direct",
                "scraped_at": datetime.now().isoformat(),
                "position": 1
            }
        }
    else:
        # T·∫°o b√†i vi·∫øt m·∫∑c ƒë·ªãnh
        return {
            "title": f"Tin t·ª©c {category} c·∫≠p nh·∫≠t m·ªõi nh·∫•t",
            "summary": f"T·ªïng h·ª£p tin t·ª©c {category} ƒë√°ng ch√∫ √Ω trong ng√†y",
            "content": None,
            "source_name": {
                "name": source.split('.')[0].capitalize(),
                "icon": f"https://{source}/favicon.ico"
            },
            "source_url": f"https://{source}",
            "source_icon": f"https://{source}/favicon.ico",
            "published_at": datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ"),
            "category": category,
            "meta_data": {
                "original_source": "direct",
                "scraped_at": datetime.now().isoformat(),
                "position": 1
            }
        }

def fetch_articles_by_category(category_name):
    """
    T√¨m ki·∫øm b√†i vi·∫øt cho m·ªôt danh m·ª•c c·ª• th·ªÉ
    
    Args:
        category_name (str): T√™n danh m·ª•c c·∫ßn t√¨m ki·∫øm
        
    Returns:
        list: Danh s√°ch b√†i vi·∫øt
    """
    articles = []
    
    try:
        # Print searching message
        print(f"[INFO] T√¨m ki·∫øm b√†i vi·∫øt cho danh m·ª•c: {category_name}")
        
        # L·∫•y m·ªôt b√†i vi·∫øt ng·∫´u nhi√™n cho danh m·ª•c
        article = get_random_article_for_category(category_name)
        articles.append(article)
    
    except Exception as e:
        print(f"[ERROR] L·ªói khi t√¨m ki·∫øm b√†i vi·∫øt cho danh m·ª•c {category_name}: {str(e)}")
    
    # Apply filters to articles
    filtered_articles = filter_articles(articles)
    
    # Print success message
    if filtered_articles:
        print(f"[OK] T√¨m th·∫•y {len(filtered_articles)} b√†i vi·∫øt cho danh m·ª•c {category_name}")
    else:
        print(f"[WARN] Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o cho danh m·ª•c {category_name}")
    
    return filtered_articles

def send_to_backend(articles, auto_send=False):
    """
    G·ª≠i b√†i vi·∫øt t·ªõi backend API
    
    Args:
        articles (list): Danh s√°ch b√†i vi·∫øt
        auto_send (bool): T·ª± ƒë·ªông g·ª≠i kh√¥ng c·∫ßn x√°c nh·∫≠n
        
    Returns:
        bool: Tr·∫°ng th√°i th√†nh c√¥ng
    """
    if not articles:
        print("Kh√¥ng c√≥ b√†i vi·∫øt n√†o ƒë·ªÉ g·ª≠i!")
        return False
    
    send_option = "y" if auto_send else input("B·∫°n c√≥ mu·ªën g·ª≠i b√†i vi·∫øt t·ªõi backend? (y/n): ").lower()
    
    if send_option != "y":
        print("ƒê√£ h·ªßy g·ª≠i d·ªØ li·ªáu t·ªõi backend")
        return False
    
    try:
        payload = {"articles": articles}
        headers = {"Content-Type": "application/json"}
        
        response = requests.post(BACKEND_API_URL, json=payload, headers=headers)
        
        if response.status_code in (200, 201):
            result = response.json()
            print(f"[OK] ƒê√£ g·ª≠i th√†nh c√¥ng {result.get('message', '')}")
            if 'errors' in result and result['errors']:
                print(f"[WARN] C√≥ {len(result['errors'])} l·ªói trong qu√° tr√¨nh import:")
                for error in result['errors']:
                    print(f"  - {error}")
            return True
        else:
            print(f"[ERROR] L·ªói khi g·ª≠i b√†i vi·∫øt t·ªõi backend: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"[ERROR] L·ªói k·∫øt n·ªëi t·ªõi backend: {str(e)}")
        return False

def main():
    """
    H√†m ch√≠nh ƒë·ªÉ t√¨m ki·∫øm v√† l∆∞u c√°c b√†i vi·∫øt
    """
    # L·∫•y danh s√°ch danh m·ª•c t·ª´ backend
    categories = get_categories()
    
    # T√¨m ki·∫øm b√†i vi·∫øt cho m·ªói danh m·ª•c
    all_articles = []
    
    for category in categories:
        articles = fetch_articles_by_category(category)
        all_articles.extend(articles)
    
    # L∆∞u b√†i vi·∫øt v√†o file JSON
    output_file = f"scraped_articles_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(all_articles, f, ensure_ascii=False, indent=4)
    
    print(f"[OK] T·ªïng c·ªông {len(all_articles)} b√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o {output_file}")
    
    # G·ª≠i b√†i vi·∫øt t·ªõi backend n·∫øu ng∆∞·ªùi d√πng mu·ªën
    send_to_backend(all_articles)

if __name__ == "__main__":
    main()
